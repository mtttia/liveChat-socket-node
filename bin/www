#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('realtimechat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//create a chat with socket
const io = require('socket.io')(server);

/* PROTOCOLLO UTILIZZO SOCKET

  DA CLIENT A SERVER

  "my name" -> Utente si connette :
  1 - assegno un id
  2 - inizializzo a 0 sended e init
  (fino a che init è false, non può mandare messaggi)
  3 - Aspetto che mi mandi un messaggio "my name" per sapere il suo nome ed inizializzarlo nella chat
  4 - controlli vari relativi al nome 
  5 - inserisco l'utente nella chat
  6 - inserisco il suo nome nella lista e dico agli altri partecipanti che è entrato
  Se il nome utente non è corretto
  1 - lo metto in una stanza che dipende dal suo id
  2 - gli scrivo che non può essere aggiunto

  "chat message" -> Quando un utente manda un messaggio :
  1 - Controllo che init == true
  2 - msg è il messaggio da mandare
  3 - inoltro il messaggio

  "disconnect" -> Quando un utente si disconnette :
  1 - Cancello il suo nome dalla lista dei nomi in attesa

  DA SERVER A CLIENT
  
  "chat message" -> Quando qualcuno scrive qualcosa :
  1 - Aggiungo il nome alla lista

  "user added" -> Quando qualcuno si aggiunge : 
  1 - Lo Aggiungo alla lista dei partrecipanti

  "user disconnected" -> Quando qualcuno si disconnette :
  1 - Lo elimino dalla lista dei partecipanti

  "cannot add you" -> Quando il nome utente di un client non va bene, è già utilizzato :
  1 - Richiedere il nome e ritentare la connessione

*/

let userList = []; //User that where connected
let roomName = "chat room";

io.on('connection', (socket)=>{
  console.log(socket.id);
  let myId = socket.id;
  let sended = 0;
  let myName;
  let init = false;  

  socket.on('my name', msg=>{
    if(!init)
    {
      //inizializzo l'utente nella chat
    //mi aspetto che msg contenga il nome utente
      if(msg)
      {
        //la stringa non è vuota
        //TODO : controlli vari relativi al nome
        if(canAddUser(msg)){
          myName = msg;
          init = true;
          console.log(myName + ", join the chat");
          //lo comunica al client
          socket.join(roomName);
          io.to(roomName).emit('user added', myName);
          userList.push(myName);
        }
        else{
          //cannot ad the user
          socket.join(myId);
          io.to(myId).emit('cannot add you', "username already used");
        }
        
      }
    }
  })

  socket.on('chat message', msg => {
    if(init)
    {
      //io.emit('chat message', msg);
      sended++;
      console.log('id = ' + myId + '/n sended = ' + sended);
      let send = {
        name : myName,
        text : msg,
      }
      send = JSON.stringify(send);
      io.to(roomName).emit('chat message', send);
    }
  });

  socket.on('disconnect', () => {
    //  TODO user disconnect
    console.log(myName + " disconnect");
    //comunico ai client
    io.to(roomName).emit('user disconnected', myName);
  });
})

function canAddUser(username){
  return !userList.includes(username);
}